name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      VERSION_RAW: ${{ github.event_name == 'workflow_dispatch'
        && inputs.version || github.ref_name }}
      IMAGE: cr.yandex/${{ secrets.YC_REGISTRY }}/app

    steps:
      - uses: actions/checkout@v4
        with: { ref: main,
          fetch-depth: 0 }

      - name: sync main
        run: git pull --ff-only origin main

      - name: normalize version
        run: |
          VER=${VERSION_RAW#releases/}
          echo "VERSION=$VER" >>"$GITHUB_ENV"

      - name: create release branch
        if: github.event_name == 'workflow_dispatch'
        run: |
          git switch -c releases/${VERSION}
          git push -u origin HEAD

      - name: set git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'npm' }

      - run: npm ci
      - run: npm run lint
      - run: npm run test

      - run: docker login cr.yandex -u oauth -p ${{ secrets.YC_OAUTH_TOKEN }}
      - run: |
          docker build -t ${IMAGE}:${VERSION} -t ${IMAGE}:${VERSION}_latest .
          docker push ${IMAGE}:${VERSION}
          docker push ${IMAGE}:${VERSION}_latest

      - name: create git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag releases/${VERSION}
          git push origin releases/${VERSION}

      - name: prepend CHANGELOG
        id: changelog
        run: |
          set -euo pipefail

          LAST_TAG=${{ env.LAST_TAG }}
          COMMITS=$(git log --pretty=format:'- %s' ${LAST_TAG}..HEAD)

          TMP=$(mktemp)
          {
            echo "## ${VERSION} ($(date +%Y-%m-%d))"
            echo "${COMMITS}"
            echo
            cat CHANGELOG.md
          } > "$TMP"
          mv "$TMP" CHANGELOG.md

          if ! git diff --quiet CHANGELOG.md; then
            git add CHANGELOG.md
            git commit -m "chore: changelog for ${VERSION}"
            git push
          fi

          echo "COMMITS<<EOF" >> "$GITHUB_OUTPUT"
          echo "${COMMITS}"   >> "$GITHUB_OUTPUT"
          echo "EOF"          >> "$GITHUB_OUTPUT"

      - name: open release issue
        run: |
          BODY=$(cat <<EOF
          **Дата:** $(date)
          **Автор:** ${{ github.actor }}
          **Версия:** ${{ env.VERSION }}
          **Коммиты:**
          ${{ steps.changelog.outputs.COMMITS }}
          
          **Образ:** \`cr.yandex/${{ secrets.YC_REGISTRY }}/app:${{ env.VERSION }}\`
          EOF
          )
          gh issue create \
            --title "Release ${VERSION}" \
            --body "$BODY" \
            --label release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: open PR back to main
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
                    --head "releases/${VERSION}" \
                    --base "main" \
                    --title "Merge release ${VERSION} to main" \
                    --body "CI-autogenerated PR for release ${VERSION}")
          echo "pr=$PR_URL" >> $GITHUB_OUTPUT
          echo "Opened $PR_URL"

      - name: wait for PR checks
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh pr checks "${{ steps.pr.outputs.pr }}" --watch

      - name: merge PR
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh pr merge "${{ steps.pr.outputs.pr }}" --merge --admin --delete-branch
